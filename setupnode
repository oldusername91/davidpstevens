PART A - Get a node.js react.js application and development server on your local machine.

  1. Install node.js

	curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
	sudo apt-get install -y nodejs

  2. Create a new react application.
	- Make a directory that will contain your new application.
	- cd to the new directory.
	- perform the following:

	sudo npm install -g create-react-app
	sudo create-react-app <Your application name> 

	- Then the following will switch on the development server for the project.
	npm start

  3. Hookup your new application to github (or whatever version control you like).
	
	git init
	git add .
	git commit -m "Initial commit"
	
	- Go to github.com and create a new repository.
	- Get the URL of the new repository and add it as a remote branch to your local git.
	
	git remote add origin <the URL of the repository>
	
	- Push to the remote
	git push origin master



PART B - Deploy your new host node.js react application.

  I just used an AWS EC2 ubuntu instance. SSH to this machine using the AWS key and as the user 'ubuntu'.
  You'll have to repeat step 1 of part A to install node.js on the remote machine.
  Also, you need to, from the AWS security groups menu (from the EC2 dashboard) add HTTP connection rules inbound and outbound for the machine.


  1. Clone your repository.
        sudo mkdir /var/www 
        cd /var/www
        sudo git clone <Your repository URL>
	
	sudo npm install
	sudo run build
	sudo chown -Rf www-data:-www-data <repository root>
      

  2. Install NGINX

	sudo vi /etc/apt/sources.list
	
	- Then add the following lines (replace artful with your linux distro release name)

	deb http://nginx.org/packages/ubuntu/ artful nginx
	deb-src http://nginx.org/packages/ubuntu/ artful nginx

	- Stop the apache2 service
	
	sudo systemctl stop apache2

    
    - Add the NGINX public key for GPG (since we added the repo to /etc/apt/sources.list).
      Make sure you log on as root.

    curl -O https://nginx.org/keys/nginx_signing.key && apt-key add ./nginx_signing.key

	- Install NGINX
	
	sudo apt update
	sudo apt install nginx

  3. Add a virtual host on NGINX.
	
	- This process is very very similar to apache.
	- Add your new virtual host domain name to /etc/hosts
	- Put the root directory of the hosted application in /var/www/<your virtual host name>, ensure the file owned by www-data:www-data and has rwx permissions. 


	- Then create the virtual host conf file for NGINX.
	- Paste the following contents into the file.

	sudo vi /etc/nginx/sites-available/<virtual domain name>
	
	server {
	   listen 80 default_server;
	   root /var/www/<repository root>/build;
	   index index.html;
	   location / {
	   }
	}


	- Then create a symbolic link to the sites-enabled NGINX directory and restart NGINX:
	sudo ln -s /etc/nginx/sites-available/<application name> /etc/nginx/sites-enabled/<application name>
	sudo systemctl restart nginx


    You should now be able to locally browse to <your virtual host name>/ in your browser.
